#
# Copyright (C) 2022 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
 
name: next build

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  DEBUG: electron-builder

jobs:

  tag:
    name: Tagging
    runs-on: ubuntu-20.04
    outputs:
      githubTag: ${{ steps.TAG_UTIL.outputs.githubTag}}
      desktopVersion: ${{ steps.TAG_UTIL.outputs.desktopVersion}}
      releaseId: ${{ steps.create_release.outputs.id}}

    steps:
      - uses: actions/checkout@v2
      - name: Generate tag utilities
        id: TAG_UTIL
        run: |
            CURRENT_DAY=$(date +'%Y%m%d')
            SHORT_SHA1=$(git rev-parse --short HEAD)
            TAG_PATTERN=0.0.$(date +'%Y%m%d%H%M')-${SHORT_SHA1}
            echo "::set-output name=githubTag::v$TAG_PATTERN"
            echo "::set-output name=desktopVersion::$TAG_PATTERN"
      - name: tag
        run: |
          git config --local user.name ${{ github.actor }}
          sed -i  "s#version\":\ \"\(.*\)\",#version\":\ \"${{ steps.TAG_UTIL.outputs.desktopVersion }}\",#g" package.json
          cat package.json
          git add package.json
          git commit -m "chore: tag ${{ steps.TAG_UTIL.outputs.githubTag }}"
          echo "Tagging with ${{ steps.TAG_UTIL.outputs.githubTag }}"
          git tag ${{ steps.TAG_UTIL.outputs.githubTag }}
          git push origin ${{ steps.TAG_UTIL.outputs.githubTag }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.TAG_UTIL.outputs.githubTag }}
          release_name: ${{ steps.TAG_UTIL.outputs.githubTag }}
          draft: true
          prerelease: true

  build:
    name: Build / ${{ matrix.os }}
    needs: tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-20.04, macos-11]
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.githubTag}}
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: setup telemetry key for production
        run: |
          sed -i -r -e "s/SEGMENT_KEY = '.*'/SEGMENT_KEY = '${{ secrets.SEGMENT_WRITE_KEY }}'/" packages/main/src/plugin/telemetry/telemetry.ts

      - name: yarn
        run: |
          yarn --frozen-lockfile --network-timeout 180000

      - name: Install flatpak on Linux
        if: ${{ matrix.os=='ubuntu-20.04' }}
        run: |
          sudo apt-get install flatpak -y
          sudo apt-get install flatpak-builder -y
          sudo apt-get install elfutils -y
          flatpak remote-add --if-not-exists flathub --user https://flathub.org/repo/flathub.flatpakrepo
          flatpak install flathub --user -y org.freedesktop.Platform/x86_64/21.08

      - name: Set macOS environment variables
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "CSC_LINK=${{secrets.CSC_LINK}}" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{secrets.CSC_KEY_PASSWORD}}" >> $GITHUB_ENV
          echo "APPLE_ID=${{secrets.APPLE_ID}}" >> $GITHUB_ENV
          echo "APPLE_ID_PASSWORD=${{secrets.APPLE_ID_PASSWORD}}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{secrets.APPLE_TEAM_ID}}" >> $GITHUB_ENV

      - name: Install Azure SignTool on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          dotnet tool install --global AzureSignTool --version 3.0.0
          echo "AZURE_KEY_VAULT_CERTIFICATE=${{secrets.AZURE_KEY_VAULT_CERTIFICATE}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AZURE_KEY_VAULT_CLIENT_ID=${{secrets.AZURE_KEY_VAULT_CLIENT_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AZURE_KEY_VAULT_SECRET=${{secrets.AZURE_KEY_VAULT_SECRET}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AZURE_KEY_VAULT_TENANT_ID=${{secrets.AZURE_KEY_VAULT_TENANT_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AZURE_KEY_VAULT_URL=${{secrets.AZURE_KEY_VAULT_URL}}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Run Build
        timeout-minutes: 20
        run: yarn compile:next

  release:
    needs: [tag, build]
    name: Release
    runs-on: ubuntu-20.04
    steps:
      - name: id
        run: echo the release id is ${{ needs.tag.outputs.releaseId}}

      - name: Publish release
        uses: StuYarrow/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ needs.tag.outputs.releaseId}}
